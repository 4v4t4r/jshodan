package com.fooock.shodan;

import com.fooock.shodan.mock.ExploitServiceMock;
import org.junit.Before;
import org.junit.Test;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;
import retrofit2.mock.BehaviorDelegate;
import retrofit2.mock.MockRetrofit;
import retrofit2.mock.NetworkBehavior;

import java.util.concurrent.TimeUnit;

/**
 *
 */
public class ExploitServiceTest {

    private String apiKey = "1234567890";
    private NetworkBehavior networkBehavior = NetworkBehavior.create();
    private ExploitService apiRestMock;

    @Before
    public void setUp() throws Exception {
        Retrofit retrofit = new Retrofit.Builder()
                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                .baseUrl("https://exploits.shodan.io/")
                .build();

        MockRetrofit mockRetrofit = new MockRetrofit.Builder(retrofit)
                .networkBehavior(networkBehavior).build();

        BehaviorDelegate<ExploitService> delegate = mockRetrofit.create(ExploitService.class);
        apiRestMock = new ExploitServiceMock(delegate);
    }

    @Test
    public void testSearchQuerySuccess() throws Exception {
        networkBehavior.setDelay(0, TimeUnit.MILLISECONDS);
        networkBehavior.setVariancePercent(0);
        networkBehavior.setFailurePercent(0);

        apiRestMock.search(apiKey, "apache").subscribe();
    }

    @Test
    public void testSearchQueryFail() throws Exception {
        networkBehavior.setDelay(0, TimeUnit.MILLISECONDS);
        networkBehavior.setVariancePercent(0);
        networkBehavior.setFailurePercent(100);

        apiRestMock.search(apiKey, "apache").subscribe();
    }

    @Test
    public void testSearchQueryWithFacetSuccess() throws Exception {
        networkBehavior.setDelay(0, TimeUnit.MILLISECONDS);
        networkBehavior.setVariancePercent(0);
        networkBehavior.setFailurePercent(0);

        apiRestMock.search(apiKey, "apache type:remote", "type,remote").subscribe();
    }

    @Test
    public void testCountWithFacetSuccess() throws Exception {
        networkBehavior.setDelay(0, TimeUnit.MILLISECONDS);
        networkBehavior.setVariancePercent(0);
        networkBehavior.setFailurePercent(0);


        apiRestMock.count(apiKey, "query apache", "type,remote,source,author,platform")
                .subscribe();
    }
}